{$DEFINE SCRIPT_ID := '2c9e42f7-cb23-4976-827f-9ffe112a0c3f'}
{$DEFINE SCRIPT_REVISION := '27'}
{$DEFINE SCRIPT_GUI}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

type
  ERSStall = (TEA_STALL, FOOD_STALL, SILK_STALL, FRUIT_STALL);
var
  CurrentStall: ERSStall = ERSStall.FRUIT_STALL;
  UseBank: Boolean = True;

type
  EStallRobberState = (
    FIND_STALL,
    LEVELED_UP,
    ROB_STALL,
    DROP_LOOT, OPEN_BANK, DEPOSIT_ITEMS, CLOSE_INTERFACE,
    WALK_SPOT,
    WAIT_STATE,
    END_SCRIPT
  );

  TStallRobber = record(TBaseWalkerScript)
    State: EStallRobberState;

    Stall: TRSObjectV2;
    SafeSpot: TPoint;
    StealList, DropList: TRSItemArray;
    StallCooldown: TCountDown;
  end;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.THIEVING, ERSSkill.TOTAL];
  Self.MinZoom := 5;
  Self.MaxZoom := 85;

  inherited;
end;

procedure TStallRobber.SetupStall();
begin
  case CurrentStall of
    ERSStall.TEA_STALL:
      begin
        Map.SetupChunk([[50,54,51,52], [0]]); 
        Objects.Setup(Map.Objects(), @Map.Walker);

        Self.Stall.Walker := @Map.Walker;
        Self.Stall.SetupEx([1.5, 2, 4], [[8983, 36786]]);
        Self.Stall.SetupUpText('Tea stall');
        Self.Stall.Finder.Colors += CTS2(9939895, 8, 0.07, 0.64);
        Self.StallCooldown.Init(7000);
        Self.SafeSpot := [8976, 36790];
        Self.StealList := ['Cup of tea'];
      end;

    ERSStall.FOOD_STALL:
      begin
        GENERATED_GRAPH.Spacing := 14;
        Map.SetupChunk([[40,52,42,51], [0]]);
        Objects.Setup(Map.Objects(), @Map.Walker);

        Self.Stall.Walker := @Map.Walker;
        Self.Stall.SetupEx([1.5, 2, 4], [[6574, 37185]]);
        Self.Stall.SetupUpText('Baker''s stall');
        Self.Stall.Finder.Colors += CTS2(9216171, 8, 0.10, 0.67);

        Self.StallCooldown.Init(7000);
        Self.SafeSpot := [6580, 37190];
        Self.StealList := ['Bread', 'Cake', 'Chocolate slice'];
        Self.DropList := ['Bread', 'Chocolate slice'];
      end;

    ERSStall.SILK_STALL:
      begin
        GENERATED_GRAPH.Spacing := 14;
        Map.SetupChunk([[40,52,42,51], [0]]);
        Objects.Setup(Map.Objects(), @Map.Walker);

        Self.Stall.Walker := @Map.Walker;
        Self.Stall.SetupEx([2, 1.5, 4], [[6554, 37172]]);
        Self.Stall.SetupUpText('Silk stall');
        Self.Stall.Finder.Colors += CTS2(9939895, 8, 0.07, 0.64);
        Self.StallCooldown.Init(5000);
        Self.SafeSpot := [6552, 37166];
        Self.StealList := ['Silk'];
      end;

    ERSStall.FRUIT_STALL:
      begin
        Map.SetupChunk([[27,56,28,55], [0]]);
        Map.Loader.Graph.UseCollisionData := True;
        Map.Walker._DoorHandler.Enabled := True;

        Objects.Setup(Map.Objects(), @Map.Walker);

        Self.Stall.Walker := @Map.Walker;
        Self.Stall.SetupEx([1.5, 2, 4], [[3084, 36000], [3108, 36000]]);
        Self.Stall.SetupUpText('Fruit Stall');
        Self.Stall.Finder.Colors += CTS2(3566426, 9, 0.19, 1.19);
        Self.Stall.Finder.Colors += CTS2(8687792, 14, 0.12, 0.65);
        Self.Stall.Finder.Colors += CTS2(2568331, 19, 0.03, 0.29);
        Self.Stall.Finder.ColorClusters += [CTS2(1666610, 20, 0.33, 2), CTS2(4805477, 11, 0.04, 0.48), 5];
        Self.StallCooldown.Init(2400);
        Self.StealList := [
          'Cooking apple', 'Banana', 'Jangerberries', 'Lemon', 'Redberries',
          'Pineapple', 'Lime', 'Strawberry', 'Strange fruit',
          'Papaya fruit', 'Golovanova fruit top'
        ];
        Self.DropList := [
          'Cooking apple', 'Banana', 'Jangerberries',
          'Lemon', 'Redberries', 'Pineapple', 'Lime'
        ];
      end;
  end;
end;

procedure TStallRobber.Init(maxActions: UInt32; maxTime: UInt64); override;
begin
  inherited;

  Self.SetupStall();
  Self.StallCooldown.Timeout := GetTickCount();
end;


function TStallRobber.RobStall(): Boolean;
begin
  if Stall.WalkClick() then
    Result := XPBar.WaitXP(2000);

  if Result then
  begin
    StallCooldown.Restart(-200, 200);
    WL.Activity.Restart();
  end;
end;

function TStallRobber.DropItems(): Boolean;
var
  slots: TIntegerArray;
begin
  if UseBank then
    Inventory.FindItems(Self.DropList, slots)
  else
    Inventory.FindItems(Self.StealList, slots);

  Result := Inventory.ShiftDrop(slots, Inventory.RandomPattern());

  if Result then
  begin
    Self.TotalActions += Length(slots);
    Self.StallCooldown.Timeout := GetTickCount();
  end;
end;

function TStallRobber.BankItems(): Boolean;
var
  count: Int32;
begin
  count := Inventory.Count();
  Result := Bank.DepositAll();
  if Result then
    Self.TotalActions += (count - Inventory.Count());
end;


function TStallRobber.GetState(): EStallRobberState;
begin
  if WL.Activity.IsFinished() then
    Exit(EStallRobberState.END_SCRIPT);

  if Chat.LeveledUp() then
    Exit(EStallRobberState.LEVELED_UP);

  if RSInterface.IsOpen() then
  begin
    if UseBank and Bank.IsOpen() and Inventory.ContainsAny(Self.StealList) then
      Exit(EStallRobberState.DEPOSIT_ITEMS);

    Exit(EStallRobberState.CLOSE_INTERFACE);
  end;

  if Inventory.IsFull() then
  begin
    if Inventory.ContainsAny(Self.DropList) then
      Exit(EStallRobberState.DROP_LOOT);

    if UseBank then
      Exit(EStallRobberState.OPEN_BANK);

    Exit(EStallRobberState.DROP_LOOT);
  end;

  if MainScreen.IsUpText('Steal-from') then
    Exit(EStallRobberState.ROB_STALL);

  if not Self.StallCooldown.IsFinished() then
    Exit(EStallRobberState.WAIT_STATE);

  if (Self.SafeSpot <> []) and not Map.InRange(Self.SafeSpot, 5) then
    Exit(EStallRobberState.WALK_SPOT);

  if Map.InRange(Self.Stall.Coordinates, 14) then
    Exit(EStallRobberState.FIND_STALL);
end;

procedure TStallRobber.Run(maxActions: UInt32; maxTime: UInt64);
begin
  Self.Init(maxActions, maxTime);

  repeat
    Self.State := Self.GetState();
    Self.SetAction(ToStr(Self.State));

    case Self.State of
      EStallRobberState.LEVELED_UP: if Chat.HandleLevelUp() then Self.StallCooldown.Timeout := GetTickCount();
      EStallRobberState.DROP_LOOT:  Self.DropItems();
      EStallRobberState.FIND_STALL, ROB_STALL: Self.RobStall();
      EStallRobberState.WAIT_STATE: Wait(100, 200);
      EStallRobberState.WALK_SPOT:  Map.Walker.WebWalk(Self.SafeSpot, 3, 0.2);

      EStallRobberState.OPEN_BANK: Banks.WalkOpen();
      EStallRobberState.DEPOSIT_ITEMS: Self.BankItems();
      EStallRobberState.CLOSE_INTERFACE: RSInterface.Close();

      EStallRobberState.END_SCRIPT: Break;
    end;

    if Self.DoAntiban() then
      Self.StallCooldown.Timeout := GetTickCount();
  until Self.ShouldStop();
end;

var
  StallRobber: TStallRobber;

{$IFDEF SCRIPT_GUI}
type
  TStallRobberConfig = record(TScriptForm)
    StallSelector: TLabeledCombobox;
    BankCheckbox: TLabeledCheckBox;
    Config: TConfigJSON;
  end;

procedure TStallRobberConfig.StartScript(sender: TObject); override;
begin
  CurrentStall := ERSStall(Self.StallSelector.GetItemIndex());
  UseBank := Self.BankCheckbox.IsChecked();

  Self.Config.Put('stall', Self.StallSelector.GetItemIndex());
  Self.Config.Put('bank', UseBank);

  inherited;
end;

procedure TStallRobberConfig.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Config.Setup('wasp-stall-robber');
  Self.Setup('Wasp Stall Robber');
  Self.Start.SetOnClick(@Self.StartScript);

  Self.AddTab('Script Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  Self.CreateAccountManager(tab);

  with Self.StallSelector do
  begin
    Create(tab);
    SetCaption('Stall:');
    SetLeft(TControl.AdjustToDPI(20));
    SetTop(TControl.AdjustToDPI(200));
    SetWidth(TControl.AdjustToDPI(300));
    SetStyle(csDropDownList);
    AddItemArray([
      'Tea stall (East Varrock)',
      'Food stall (Ardougne market)',
      'Silk stall (Ardougne market, safe spot knights!)',
      'Fruit stall (Hosidius east of the market)'
    ]);
    if Self.Config.Has('stall') then
      SetItemIndex(Self.Config.GetInt('stall'))
    else
      SetItemIndex(Ord(CurrentStall));
  end;

  with Self.BankCheckbox do
  begin
    Create(tab);
    SetCaption('Bank loot');
    SetLeft(TControl.AdjustToDPI(20));
    SetTop(TControl.AdjustToDPI(260));
    if Self.Config.Has('bank') then
      SetChecked(Self.Config.GetBoolean('bank'))
    else
      SetChecked(UseBank);
  end;

  Self.CreateAntibanManager();
  Self.CreateWaspLibSettings();
  Self.CreateAPISettings();

  inherited;
end;

var
  StallRobberConfig: TStallRobberConfig;
{$ENDIF}

begin
  {$IFDEF SCRIPT_GUI}
  StallRobberConfig.Run();
  {$ENDIF}
  StallRobber.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
